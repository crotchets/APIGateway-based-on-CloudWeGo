// Code generated by hertz generator.

package apigatewayservice

import (
	"APIGateway/biz/idlmanager"
	apigatewayservice "APIGateway/biz/model/apigatewayservice"
	"APIGateway/biz/rpcrouter"
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/adaptor"
	"github.com/cloudwego/hertz/pkg/common/json"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/pkg/generic"
	"io"
)

// APIPost .
// @router agw/:serviceName/*methodName [POST]
func APIPost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req apigatewayservice.Req
	if err = c.BindAndValidate(&req); err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	} // 请求内容绑定
	var resp string
	httpReq, _ := adaptor.GetCompatRequest(c.GetRequest())
	re, err := generic.FromHTTPRequest(httpReq) // 转换为http请求
	if err != nil {
		c.JSON(consts.StatusBadRequest, utils.H{"msg": err.Error()})
	}
	body := re.Body
	bytes, err := json.Marshal(body)
	if err != nil {
		c.JSON(consts.StatusBadRequest, utils.H{"msg": err.Error()})
	}
	str := string(bytes)
	res, err := rpcrouter.GetRPCRouter().Forward(ctx, str, req.ServiceName, req.IDLVersion, req.MethodName) // RPCRouter转发，可考虑单例模式

	if err != nil {
		fmt.Println(err)
		return
	}
	resp = res.(string)

	c.JSON(consts.StatusOK, resp)
}

// IDLManage .
// @router idl/:IDLName/:IDLVersion [PATCH]
func IDLManage(ctx context.Context, c *app.RequestContext) {
	var err error
	var req apigatewayservice.IDLManageReq
	var resp = new(apigatewayservice.Resp)
	if err = c.BindAndValidate(&req); err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	switch req.Method {
	case "add":
		httpReq, _ := adaptor.GetCompatRequest(c.GetRequest())
		body, _ := io.ReadAll(httpReq.Body) // 获取请求数据
		if err := idlmanager.GetManager().AddIDL(req.IDLName, req.IDLVersion, string(body)); err != nil {
			resp.Msg = err.Error()
			c.JSON(consts.StatusBadRequest, resp)
			return
		} else {
			resp.Msg = "success"
		}
	case "delete":
		if err := idlmanager.GetManager().DelIDL(req.IDLName, req.IDLVersion); err != nil {
			resp.Msg = err.Error()
			c.JSON(consts.StatusBadRequest, resp)
			return
		} else {
			resp.Msg = "success"
		}
	case "get":
		content, err := idlmanager.GetManager().GetIDL(req.IDLName, req.IDLVersion)
		if err != nil {
			resp.Msg = err.Error()
			c.JSON(consts.StatusBadRequest, resp)
			return
		} else {
			resp.Msg = content
		}
	}
	c.JSON(consts.StatusOK, resp)
}
